// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/09/2019 18:46:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    mux8_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux8_1_vlg_sample_tst(
	e0,
	e1,
	e2,
	e3,
	e4,
	e5,
	e6,
	e7,
	switch,
	sampler_tx
);
input [7:0] e0;
input [7:0] e1;
input [7:0] e2;
input [7:0] e3;
input [7:0] e4;
input [7:0] e5;
input [7:0] e6;
input [7:0] e7;
input [2:0] switch;
output sampler_tx;

reg sample;
time current_time;
always @(e0 or e1 or e2 or e3 or e4 or e5 or e6 or e7 or switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module mux8_1_vlg_check_tst (
	y,
	sampler_rx
);
input [7:0] y;
input sampler_rx;

reg [7:0] y_expected;

reg [7:0] y_prev;

reg [7:0] y_expected_prev;

reg [7:0] last_y_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	y_prev = y;
end

// update expected /o prevs

always @(trigger)
begin
	y_expected_prev = y_expected;
end


// expected y[ 7 ]
initial
begin
	y_expected[7] = 1'bX;
end 
// expected y[ 6 ]
initial
begin
	y_expected[6] = 1'bX;
end 
// expected y[ 5 ]
initial
begin
	y_expected[5] = 1'bX;
end 
// expected y[ 4 ]
initial
begin
	y_expected[4] = 1'bX;
end 
// expected y[ 3 ]
initial
begin
	y_expected[3] = 1'bX;
end 
// expected y[ 2 ]
initial
begin
	y_expected[2] = 1'bX;
end 
// expected y[ 1 ]
initial
begin
	y_expected[1] = 1'bX;
end 
// expected y[ 0 ]
initial
begin
	y_expected[0] = 1'bX;
end 
// generate trigger
always @(y_expected or y)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected y = %b | ",y_expected_prev);
	$display("| real y = %b | ",y_prev);
`endif
	if (
		( y_expected_prev[0] !== 1'bx ) && ( y_prev[0] !== y_expected_prev[0] )
		&& ((y_expected_prev[0] !== last_y_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[0] = y_expected_prev[0];
	end
	if (
		( y_expected_prev[1] !== 1'bx ) && ( y_prev[1] !== y_expected_prev[1] )
		&& ((y_expected_prev[1] !== last_y_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[1] = y_expected_prev[1];
	end
	if (
		( y_expected_prev[2] !== 1'bx ) && ( y_prev[2] !== y_expected_prev[2] )
		&& ((y_expected_prev[2] !== last_y_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[2] = y_expected_prev[2];
	end
	if (
		( y_expected_prev[3] !== 1'bx ) && ( y_prev[3] !== y_expected_prev[3] )
		&& ((y_expected_prev[3] !== last_y_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[3] = y_expected_prev[3];
	end
	if (
		( y_expected_prev[4] !== 1'bx ) && ( y_prev[4] !== y_expected_prev[4] )
		&& ((y_expected_prev[4] !== last_y_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[4] = y_expected_prev[4];
	end
	if (
		( y_expected_prev[5] !== 1'bx ) && ( y_prev[5] !== y_expected_prev[5] )
		&& ((y_expected_prev[5] !== last_y_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[5] = y_expected_prev[5];
	end
	if (
		( y_expected_prev[6] !== 1'bx ) && ( y_prev[6] !== y_expected_prev[6] )
		&& ((y_expected_prev[6] !== last_y_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[6] = y_expected_prev[6];
	end
	if (
		( y_expected_prev[7] !== 1'bx ) && ( y_prev[7] !== y_expected_prev[7] )
		&& ((y_expected_prev[7] !== last_y_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_y_exp[7] = y_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module mux8_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] e0;
reg [7:0] e1;
reg [7:0] e2;
reg [7:0] e3;
reg [7:0] e4;
reg [7:0] e5;
reg [7:0] e6;
reg [7:0] e7;
reg [2:0] switch;
// wires                                               
wire [7:0] y;

wire sampler;                             

// assign statements (if any)                          
mux8_1 i1 (
// port map - connection between master ports and signals/registers   
	.e0(e0),
	.e1(e1),
	.e2(e2),
	.e3(e3),
	.e4(e4),
	.e5(e5),
	.e6(e6),
	.e7(e7),
	.switch(switch),
	.y(y)
);
// e0[ 7 ]
initial
begin
	e0[7] = 1'b0;
end 
// e0[ 6 ]
initial
begin
	e0[6] = 1'b0;
end 
// e0[ 5 ]
initial
begin
	e0[5] = 1'b0;
end 
// e0[ 4 ]
initial
begin
	e0[4] = 1'b0;
end 
// e0[ 3 ]
initial
begin
	e0[3] = 1'b0;
end 
// e0[ 2 ]
initial
begin
	e0[2] = 1'b0;
end 
// e0[ 1 ]
initial
begin
	e0[1] = 1'b0;
end 
// e0[ 0 ]
initial
begin
	e0[0] = 1'b0;
end 
// e1[ 7 ]
initial
begin
	e1[7] = 1'b0;
end 
// e1[ 6 ]
initial
begin
	e1[6] = 1'b0;
end 
// e1[ 5 ]
initial
begin
	e1[5] = 1'b0;
end 
// e1[ 4 ]
initial
begin
	e1[4] = 1'b0;
end 
// e1[ 3 ]
initial
begin
	e1[3] = 1'b0;
end 
// e1[ 2 ]
initial
begin
	e1[2] = 1'b0;
end 
// e1[ 1 ]
initial
begin
	e1[1] = 1'b0;
end 
// e1[ 0 ]
initial
begin
	e1[0] = 1'b1;
end 
// e2[ 7 ]
initial
begin
	e2[7] = 1'b0;
end 
// e2[ 6 ]
initial
begin
	e2[6] = 1'b0;
end 
// e2[ 5 ]
initial
begin
	e2[5] = 1'b0;
end 
// e2[ 4 ]
initial
begin
	e2[4] = 1'b0;
end 
// e2[ 3 ]
initial
begin
	e2[3] = 1'b0;
end 
// e2[ 2 ]
initial
begin
	e2[2] = 1'b0;
end 
// e2[ 1 ]
initial
begin
	e2[1] = 1'b1;
end 
// e2[ 0 ]
initial
begin
	e2[0] = 1'b1;
end 
// e3[ 7 ]
initial
begin
	e3[7] = 1'b0;
end 
// e3[ 6 ]
initial
begin
	e3[6] = 1'b0;
end 
// e3[ 5 ]
initial
begin
	e3[5] = 1'b0;
end 
// e3[ 4 ]
initial
begin
	e3[4] = 1'b0;
end 
// e3[ 3 ]
initial
begin
	e3[3] = 1'b0;
end 
// e3[ 2 ]
initial
begin
	e3[2] = 1'b0;
end 
// e3[ 1 ]
initial
begin
	e3[1] = 1'b1;
end 
// e3[ 0 ]
initial
begin
	e3[0] = 1'b1;
end 
// e4[ 7 ]
initial
begin
	e4[7] = 1'b0;
end 
// e4[ 6 ]
initial
begin
	e4[6] = 1'b0;
end 
// e4[ 5 ]
initial
begin
	e4[5] = 1'b0;
end 
// e4[ 4 ]
initial
begin
	e4[4] = 1'b0;
end 
// e4[ 3 ]
initial
begin
	e4[3] = 1'b0;
end 
// e4[ 2 ]
initial
begin
	e4[2] = 1'b1;
end 
// e4[ 1 ]
initial
begin
	e4[1] = 1'b0;
end 
// e4[ 0 ]
initial
begin
	e4[0] = 1'b0;
end 
// e5[ 7 ]
initial
begin
	e5[7] = 1'b0;
end 
// e5[ 6 ]
initial
begin
	e5[6] = 1'b0;
end 
// e5[ 5 ]
initial
begin
	e5[5] = 1'b0;
end 
// e5[ 4 ]
initial
begin
	e5[4] = 1'b0;
end 
// e5[ 3 ]
initial
begin
	e5[3] = 1'b0;
end 
// e5[ 2 ]
initial
begin
	e5[2] = 1'b1;
end 
// e5[ 1 ]
initial
begin
	e5[1] = 1'b0;
end 
// e5[ 0 ]
initial
begin
	e5[0] = 1'b1;
end 
// e6[ 7 ]
initial
begin
	e6[7] = 1'b0;
end 
// e6[ 6 ]
initial
begin
	e6[6] = 1'b0;
end 
// e6[ 5 ]
initial
begin
	e6[5] = 1'b0;
end 
// e6[ 4 ]
initial
begin
	e6[4] = 1'b0;
end 
// e6[ 3 ]
initial
begin
	e6[3] = 1'b0;
end 
// e6[ 2 ]
initial
begin
	e6[2] = 1'b1;
end 
// e6[ 1 ]
initial
begin
	e6[1] = 1'b1;
end 
// e6[ 0 ]
initial
begin
	e6[0] = 1'b0;
end 
// e7[ 7 ]
initial
begin
	e7[7] = 1'b0;
end 
// e7[ 6 ]
initial
begin
	e7[6] = 1'b0;
end 
// e7[ 5 ]
initial
begin
	e7[5] = 1'b0;
end 
// e7[ 4 ]
initial
begin
	e7[4] = 1'b0;
end 
// e7[ 3 ]
initial
begin
	e7[3] = 1'b0;
end 
// e7[ 2 ]
initial
begin
	e7[2] = 1'b1;
end 
// e7[ 1 ]
initial
begin
	e7[1] = 1'b1;
end 
// e7[ 0 ]
initial
begin
	e7[0] = 1'b1;
end 
// switch[ 2 ]
initial
begin
	switch[2] = 1'b0;
	switch[2] = #500000 1'b1;
	switch[2] = #420000 1'b0;
end 
// switch[ 1 ]
initial
begin
	switch[1] = 1'b0;
	switch[1] = #300000 1'b1;
	switch[1] = #200000 1'b0;
	switch[1] = #180000 1'b1;
	switch[1] = #240000 1'b0;
end 
// switch[ 0 ]
initial
begin
	switch[0] = 1'b0;
	switch[0] = #140000 1'b1;
	switch[0] = #140000 1'b0;
	switch[0] = #120000 1'b1;
	switch[0] = #100000 1'b0;
	switch[0] = #80000 1'b1;
	switch[0] = #100000 1'b0;
	switch[0] = #80000 1'b1;
	switch[0] = #160000 1'b0;
end 

mux8_1_vlg_sample_tst tb_sample (
	.e0(e0),
	.e1(e1),
	.e2(e2),
	.e3(e3),
	.e4(e4),
	.e5(e5),
	.e6(e6),
	.e7(e7),
	.switch(switch),
	.sampler_tx(sampler)
);

mux8_1_vlg_check_tst tb_out(
	.y(y),
	.sampler_rx(sampler)
);
endmodule

